From 6eca65617aacd19f4928acd5766b8dd20eda0b34 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Sat, 13 Aug 2022 20:37:03 -0700
Subject: [PATCH] Fix build with clang-15+

Fixes
json_util.c:63:35: error: a function declaration without a prototype is deprecated in all versions of C [-We
rror,-Wstrict-prototypes]
const char *json_util_get_last_err()
                                  ^
                                   void

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 json_util.c            | 2 +-
 tests/test1.c          | 6 +++---
 tests/test4.c          | 2 +-
 tests/test_cast.c      | 2 +-
 tests/test_charcase.c  | 2 +-
 tests/test_parse.c     | 8 ++++----
 tests/test_printbuf.c  | 4 ++--
 tests/test_util_file.c | 6 +++---
 8 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/json_util.c b/json_util.c
index 952770afc7..83d9c68319 100644
--- a/json_util.c
+++ b/json_util.c
@@ -60,7 +60,7 @@ static int _json_object_to_fd(int fd, struct json_object *obj, int flags, const
 
 static char _last_err[256] = "";
 
-const char *json_util_get_last_err()
+const char *json_util_get_last_err(void)
 {
 	if (_last_err[0] == '\0')
 		return NULL;
diff --git a/tests/test1.c b/tests/test1.c
index befd246cf1..d28811bd52 100644
--- a/tests/test1.c
+++ b/tests/test1.c
@@ -61,7 +61,7 @@ static const char *to_json_string(json_object *obj, int flags)
 #endif
 
 json_object *make_array(void);
-json_object *make_array()
+json_object *make_array(void)
 {
 	json_object *my_array;
 
@@ -77,7 +77,7 @@ json_object *make_array()
 }
 
 void test_array_del_idx(void);
-void test_array_del_idx()
+void test_array_del_idx(void)
 {
 	int rc;
 	size_t ii;
@@ -143,7 +143,7 @@ void test_array_del_idx()
 }
 
 void test_array_list_expand_internal(void);
-void test_array_list_expand_internal()
+void test_array_list_expand_internal(void)
 {
 	int rc;
 	size_t ii;
diff --git a/tests/test4.c b/tests/test4.c
index 749459dcd9..1e136e592c 100644
--- a/tests/test4.c
+++ b/tests/test4.c
@@ -31,7 +31,7 @@ void print_hex(const char *s)
 }
 
 static void test_lot_of_adds(void);
-static void test_lot_of_adds()
+static void test_lot_of_adds(void)
 {
 	int ii;
 	char key[50];
diff --git a/tests/test_cast.c b/tests/test_cast.c
index 276b4613c5..02e19eaa11 100644
--- a/tests/test_cast.c
+++ b/tests/test_cast.c
@@ -97,7 +97,7 @@ static void getit(struct json_object *new_obj, const char *field)
 	printf("new_obj.%s json_object_get_double()=%f\n", field, json_object_get_double(o));
 }
 
-static void checktype_header()
+static void checktype_header(void)
 {
 	printf("json_object_is_type: %s,%s,%s,%s,%s,%s,%s\n", json_type_to_name(json_type_null),
 	       json_type_to_name(json_type_boolean), json_type_to_name(json_type_double),
diff --git a/tests/test_charcase.c b/tests/test_charcase.c
index c6e783eee1..8ffcb6804d 100644
--- a/tests/test_charcase.c
+++ b/tests/test_charcase.c
@@ -22,7 +22,7 @@ int main(int argc, char **argv)
 }
 
 /* make sure only lowercase forms are parsed in strict mode */
-static void test_case_parse()
+static void test_case_parse(void)
 {
 	struct json_tokener *tok;
 	json_object *new_obj;
diff --git a/tests/test_parse.c b/tests/test_parse.c
index cdd2d8a63f..4a8e3d74e8 100644
--- a/tests/test_parse.c
+++ b/tests/test_parse.c
@@ -96,7 +96,7 @@ static void single_basic_parse(const char *test_string, int clear_serializer)
 	if (getenv("TEST_PARSE_CHUNKSIZE") != NULL)
 		single_incremental_parse(test_string, clear_serializer);
 }
-static void test_basic_parse()
+static void test_basic_parse(void)
 {
 	single_basic_parse("\"\003\"", 0);
 	single_basic_parse("/* hello */\"foo\"", 0);
@@ -199,7 +199,7 @@ static void test_basic_parse()
 	single_basic_parse("[18446744073709551616]", 1);
 }
 
-static void test_utf8_parse()
+static void test_utf8_parse(void)
 {
 	// json_tokener_parse doesn't support checking for byte order marks.
 	// It's the responsibility of the caller to detect and skip a BOM.
@@ -226,7 +226,7 @@ static int clear_serializer(json_object *jso, int flags, json_object *parent_jso
 	return JSON_C_VISIT_RETURN_CONTINUE;
 }
 
-static void test_verbose_parse()
+static void test_verbose_parse(void)
 {
 	json_object *new_obj;
 	enum json_tokener_error error = json_tokener_success;
@@ -566,7 +566,7 @@ struct incremental_step
     {NULL, -1, -1, json_tokener_success, 0, 0},
 };
 
-static void test_incremental_parse()
+static void test_incremental_parse(void)
 {
 	json_object *new_obj;
 	enum json_tokener_error jerr;
diff --git a/tests/test_printbuf.c b/tests/test_printbuf.c
index 2a2ccc0e01..3b1540f337 100644
--- a/tests/test_printbuf.c
+++ b/tests/test_printbuf.c
@@ -19,7 +19,7 @@ static void test_printbuf_memset_length(void);
 #define __func__ __FUNCTION__
 #endif
 
-static void test_basic_printbuf_memset()
+static void test_basic_printbuf_memset(void)
 {
 	struct printbuf *pb;
 
@@ -32,7 +32,7 @@ static void test_basic_printbuf_memset()
 	printf("%s: end test\n", __func__);
 }
 
-static void test_printbuf_memset_length()
+static void test_printbuf_memset_length(void)
 {
 	struct printbuf *pb;
 
diff --git a/tests/test_util_file.c b/tests/test_util_file.c
index f3a022ec36..27a097e798 100644
--- a/tests/test_util_file.c
+++ b/tests/test_util_file.c
@@ -38,7 +38,7 @@ static void test_read_fd_equal(const char *testdir);
 #define PATH_MAX 256
 #endif
 
-static void test_write_to_file()
+static void test_write_to_file(void)
 {
 	json_object *jso;
 
@@ -234,7 +234,7 @@ static void test_read_valid_nested_with_fd(const char *testdir)
 	close(d);
 }
 
-static void test_read_nonexistant()
+static void test_read_nonexistant(void)
 {
 	const char *filename = "./not_present.json";
 
@@ -252,7 +252,7 @@ static void test_read_nonexistant()
 	}
 }
 
-static void test_read_closed()
+static void test_read_closed(void)
 {
 	// Test reading from a closed fd
 	int d = open("/dev/null", O_RDONLY);
