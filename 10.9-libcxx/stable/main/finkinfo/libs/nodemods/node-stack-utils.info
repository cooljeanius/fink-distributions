Package: node-stack-utils
Version: 2.0.3
Revision: 1.1
###
BuildDepends: <<
	fink (>= 0.32)
<<
Depends: <<
	node-escape-string-regexp,
	nodejs
<<
###
Source: mirror:debian:/pool/main/n/%n/%n_%v.orig.tar.gz
Source-Checksum: SHA256(cac320e400c173341bd8bd1425d194654028348e496f6de06abb7df9f0d15752)
SourceDirectory: stack-utils-%v
Source2: mirror:debian:pool/main/n/%n/%n_%v-1.debian.tar.xz
Source2-Checksum: SHA256(732602a95e3aee33ccf7662dbfe53bdb9d55b08a65c8d3a9bf9c2a94cde90443)
Source2ExtractDir: stack-utils-%v
Source3: mirror:debian:pool/main/n/%n/%n_%v.orig-types-stack-utils.tar.gz
Source3-Checksum: SHA256(ed32f8d3ca8900e42d7ea571dd992acd5e3e0647a531daf08f93b3bcedf4edc8)
Source3ExtractDir: stack-utils-%v
###
DocFiles: readme.md license
###
PatchScript: <<
mv stack-utils types

patch -p1 < debian/patches/ignore-test-that-requires-new-tap.diff
<<
CompileScript: <<
echo
<<
# No tests as it will cause a circdep
#InfoTest: <<
#	TestDepends: <<
#		node-q,
#		node-tap (>= 8.0.0),
#		node-pify,
#		node-lodash-packages
#	<<
#	TestScript: <<
#tap --100 -J `ls test/*.js | grep -v test/long-stack-traces.js` || exit 2
#	<<
#<<
InstallScript: <<
install -d -m0755 %i/share/nodejs/stack-utils
install -m0644 index.js %i/share/nodejs/stack-utils/
install -m0644 package.json %i/share/nodejs/stack-utils/

install -d -m0755 %i/share/nodejs/@types/stack-utils
install -m0644 types/index.d.ts %i/share/nodejs/@types/stack-utils/
install -m0644 types/package.json %i/share/nodejs/@types/stack-utils/
<<
###
Description: Captures and cleans stack traces
DescDetail: <<
This modules provides API for working with nodejs stack traces.
Ones could create new stack traces instance simulating for instance
deep call of function, or clean existing stack trace. This API
includes function to call up and down on stack trace.
.
In computing, a stack trace (also called stack backtrace or
stack traceback) is a report of the active stack frames
at a certain point in time during the execution of a program.
Programmers commonly use stack tracing during interactive
and post-mortem debugging. A stack trace allows tracking
the sequence of nested functions called - up to the point
where the stack trace is generated.
In a post-mortem scenario this extends up to the function
where the failure occurred
.
Node.js is an event-based server-side JavaScript engine.
<<
###
License: BSD
Homepage: Captures and cleans stack traces
Maintainer: Justin F. Hallett <thesin@users.sourceforge.net>
